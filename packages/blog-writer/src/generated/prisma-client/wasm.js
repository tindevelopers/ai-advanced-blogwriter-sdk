
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BlogPostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  metaDescription: 'metaDescription',
  excerpt: 'excerpt',
  content: 'content',
  status: 'status',
  contentType: 'contentType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  publishedAt: 'publishedAt',
  scheduledAt: 'scheduledAt',
  category: 'category',
  authorId: 'authorId',
  authorName: 'authorName',
  authorEmail: 'authorEmail',
  authorBio: 'authorBio',
  focusKeyword: 'focusKeyword',
  keywords: 'keywords',
  keywordDensity: 'keywordDensity',
  seoScore: 'seoScore',
  readabilityScore: 'readabilityScore',
  wordCount: 'wordCount',
  readingTime: 'readingTime',
  ogTitle: 'ogTitle',
  ogDescription: 'ogDescription',
  ogImage: 'ogImage',
  twitterCard: 'twitterCard',
  twitterImage: 'twitterImage',
  allowComments: 'allowComments',
  featured: 'featured',
  language: 'language',
  template: 'template',
  featuredImageUrl: 'featuredImageUrl',
  featuredImageAlt: 'featuredImageAlt',
  featuredImageCaption: 'featuredImageCaption',
  featuredImageCredit: 'featuredImageCredit',
  views: 'views',
  uniqueVisitors: 'uniqueVisitors',
  shares: 'shares',
  comments: 'comments',
  avgTimeOnPage: 'avgTimeOnPage',
  bounceRate: 'bounceRate'
};

exports.Prisma.BlogPostVersionScalarFieldEnum = {
  id: 'id',
  version: 'version',
  blogPostId: 'blogPostId',
  title: 'title',
  content: 'content',
  metaDescription: 'metaDescription',
  excerpt: 'excerpt',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  changeSummary: 'changeSummary',
  focusKeyword: 'focusKeyword',
  keywords: 'keywords',
  keywordDensity: 'keywordDensity',
  seoScore: 'seoScore',
  readabilityScore: 'readabilityScore',
  wordCount: 'wordCount',
  branchId: 'branchId'
};

exports.Prisma.BlogPostMediaScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  type: 'type',
  url: 'url',
  alt: 'alt',
  caption: 'caption',
  position: 'position'
};

exports.Prisma.BlogPostCTAScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  text: 'text',
  url: 'url',
  type: 'type',
  position: 'position'
};

exports.Prisma.TableOfContentsEntryScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  title: 'title',
  anchor: 'anchor',
  level: 'level',
  order: 'order'
};

exports.Prisma.SearchRankingScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  keyword: 'keyword',
  position: 'position',
  searchEngine: 'searchEngine',
  checkedAt: 'checkedAt'
};

exports.Prisma.BlogPostSuggestionScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  type: 'type',
  message: 'message',
  priority: 'priority',
  resolved: 'resolved',
  createdAt: 'createdAt'
};

exports.Prisma.ContentTypePatternScalarFieldEnum = {
  id: 'id',
  contentType: 'contentType',
  keywords: 'keywords',
  patterns: 'patterns',
  priority: 'priority',
  enabled: 'enabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogAIConfigurationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  modelProvider: 'modelProvider',
  modelId: 'modelId',
  keywordDensity: 'keywordDensity',
  minLength: 'minLength',
  maxLength: 'maxLength',
  optimizeMetaDescription: 'optimizeMetaDescription',
  generateAltText: 'generateAltText',
  focusKeywords: 'focusKeywords',
  readingLevel: 'readingLevel',
  tone: 'tone',
  contentType: 'contentType',
  includeSources: 'includeSources',
  factCheck: 'factCheck',
  defaultTemplate: 'defaultTemplate',
  templateVariables: 'templateVariables',
  researchEnabled: 'researchEnabled',
  researchDepth: 'researchDepth',
  includeTrends: 'includeTrends',
  competitorAnalysis: 'competitorAnalysis',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  description: 'description',
  promptTemplate: 'promptTemplate',
  structureTemplate: 'structureTemplate',
  variables: 'variables',
  wordCountRange: 'wordCountRange',
  sections: 'sections',
  enabled: 'enabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContentResearchScalarFieldEnum = {
  id: 'id',
  topic: 'topic',
  keywords: 'keywords',
  trends: 'trends',
  competitors: 'competitors',
  audience: 'audience',
  researchDepth: 'researchDepth',
  metadata: 'metadata',
  createdAt: 'createdAt',
  blogPostId: 'blogPostId'
};

exports.Prisma.SEOAnalysisScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  score: 'score',
  keywordOptimization: 'keywordOptimization',
  contentStructure: 'contentStructure',
  metaOptimization: 'metaOptimization',
  readability: 'readability',
  recommendations: 'recommendations',
  analyzedAt: 'analyzedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  color: 'color',
  icon: 'icon',
  parentId: 'parentId',
  order: 'order',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogPostCategoryScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  categoryId: 'categoryId',
  isPrimary: 'isPrimary',
  createdAt: 'createdAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  color: 'color',
  isSystem: 'isSystem',
  usageCount: 'usageCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogPostTagScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  tagId: 'tagId',
  createdAt: 'createdAt'
};

exports.Prisma.TagSuggestionScalarFieldEnum = {
  id: 'id',
  baseTagId: 'baseTagId',
  suggestedTagId: 'suggestedTagId',
  confidence: 'confidence',
  occurrences: 'occurrences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContentRelationshipScalarFieldEnum = {
  id: 'id',
  fromPostId: 'fromPostId',
  toPostId: 'toPostId',
  relationshipType: 'relationshipType',
  strength: 'strength',
  isAuto: 'isAuto',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.VersionBranchScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  name: 'name',
  description: 'description',
  createdFrom: 'createdFrom',
  isMain: 'isMain',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  mergedAt: 'mergedAt',
  mergedBy: 'mergedBy',
  mergedInto: 'mergedInto'
};

exports.Prisma.VersionComparisonScalarFieldEnum = {
  id: 'id',
  fromVersionId: 'fromVersionId',
  toVersionId: 'toVersionId',
  diffSummary: 'diffSummary',
  changedFields: 'changedFields',
  addedWords: 'addedWords',
  removedWords: 'removedWords',
  modifiedWords: 'modifiedWords',
  similarityScore: 'similarityScore',
  comparedAt: 'comparedAt',
  comparedBy: 'comparedBy'
};

exports.Prisma.WorkflowHistoryScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  versionId: 'versionId',
  fromStatus: 'fromStatus',
  toStatus: 'toStatus',
  action: 'action',
  comment: 'comment',
  metadata: 'metadata',
  performedAt: 'performedAt',
  performedBy: 'performedBy',
  assignedTo: 'assignedTo',
  dueDate: 'dueDate'
};

exports.Prisma.ApprovalWorkflowScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  versionId: 'versionId',
  approverIds: 'approverIds',
  currentStep: 'currentStep',
  totalSteps: 'totalSteps',
  isComplete: 'isComplete',
  isApproved: 'isApproved',
  createdAt: 'createdAt',
  completedAt: 'completedAt',
  dueDate: 'dueDate'
};

exports.Prisma.ApprovalStepScalarFieldEnum = {
  id: 'id',
  workflowId: 'workflowId',
  stepNumber: 'stepNumber',
  approverId: 'approverId',
  approverEmail: 'approverEmail',
  status: 'status',
  comment: 'comment',
  submittedAt: 'submittedAt'
};

exports.Prisma.MetadataFieldScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  fieldType: 'fieldType',
  isRequired: 'isRequired',
  isSystem: 'isSystem',
  defaultValue: 'defaultValue',
  validation: 'validation',
  group: 'group',
  order: 'order',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomMetadataScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  fieldId: 'fieldId',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SeoMetadataScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  canonicalUrl: 'canonicalUrl',
  robotsDirective: 'robotsDirective',
  ogType: 'ogType',
  ogTitle: 'ogTitle',
  ogDescription: 'ogDescription',
  ogImage: 'ogImage',
  ogImageAlt: 'ogImageAlt',
  ogUrl: 'ogUrl',
  ogSiteName: 'ogSiteName',
  ogLocale: 'ogLocale',
  twitterCard: 'twitterCard',
  twitterSite: 'twitterSite',
  twitterCreator: 'twitterCreator',
  twitterTitle: 'twitterTitle',
  twitterDescription: 'twitterDescription',
  twitterImage: 'twitterImage',
  twitterImageAlt: 'twitterImageAlt',
  schemaType: 'schemaType',
  structuredData: 'structuredData',
  focusKeywords: 'focusKeywords',
  secondaryKeywords: 'secondaryKeywords',
  keywordDensity: 'keywordDensity',
  internalLinks: 'internalLinks',
  externalLinks: 'externalLinks',
  imageCount: 'imageCount',
  headingStructure: 'headingStructure',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PublishingScheduleScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  scheduledFor: 'scheduledFor',
  timezone: 'timezone',
  publishedAt: 'publishedAt',
  status: 'status',
  autoPromote: 'autoPromote',
  promotionChannels: 'promotionChannels',
  notifySubscribers: 'notifySubscribers',
  errorMessage: 'errorMessage',
  retryCount: 'retryCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  actionUrl: 'actionUrl',
  isRead: 'isRead',
  priority: 'priority',
  metadata: 'metadata',
  createdAt: 'createdAt',
  readAt: 'readAt',
  expiresAt: 'expiresAt',
  blogPostId: 'blogPostId'
};

exports.Prisma.ContentSeriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogPostSeriesScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  seriesId: 'seriesId',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.TopicClusterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  parentId: 'parentId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TopicResearchScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  primaryKeywords: 'primaryKeywords',
  secondaryKeywords: 'secondaryKeywords',
  longTailKeywords: 'longTailKeywords',
  searchVolume: 'searchVolume',
  keywordDifficulty: 'keywordDifficulty',
  cpc: 'cpc',
  seasonalityData: 'seasonalityData',
  trendScore: 'trendScore',
  trending: 'trending',
  trendData: 'trendData',
  peakMonths: 'peakMonths',
  opportunityScore: 'opportunityScore',
  competitionLevel: 'competitionLevel',
  contentGapScore: 'contentGapScore',
  status: 'status',
  priority: 'priority',
  estimatedEffort: 'estimatedEffort',
  tags: 'tags',
  clusterId: 'clusterId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TopicRelationshipScalarFieldEnum = {
  id: 'id',
  fromTopicId: 'fromTopicId',
  toTopicId: 'toTopicId',
  relationshipType: 'relationshipType',
  strength: 'strength',
  createdAt: 'createdAt'
};

exports.Prisma.EditorialCalendarScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isDefault: 'isDefault',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EditorialCalendarEntryScalarFieldEnum = {
  id: 'id',
  calendarId: 'calendarId',
  title: 'title',
  description: 'description',
  plannedDate: 'plannedDate',
  publishDate: 'publishDate',
  dueDate: 'dueDate',
  contentType: 'contentType',
  status: 'status',
  priority: 'priority',
  assignedTo: 'assignedTo',
  reviewerIds: 'reviewerIds',
  targetWordCount: 'targetWordCount',
  estimatedHours: 'estimatedHours',
  tags: 'tags',
  categories: 'categories',
  topicId: 'topicId',
  blogPostId: 'blogPostId',
  contentBriefId: 'contentBriefId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CalendarMilestoneScalarFieldEnum = {
  id: 'id',
  entryId: 'entryId',
  name: 'name',
  description: 'description',
  dueDate: 'dueDate',
  isCompleted: 'isCompleted',
  completedAt: 'completedAt',
  completedBy: 'completedBy'
};

exports.Prisma.TimeTrackingEntryScalarFieldEnum = {
  id: 'id',
  entryId: 'entryId',
  userId: 'userId',
  activity: 'activity',
  duration: 'duration',
  description: 'description',
  trackedAt: 'trackedAt'
};

exports.Prisma.CompetitorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  domain: 'domain',
  description: 'description',
  type: 'type',
  domainAuthority: 'domainAuthority',
  monthlyTraffic: 'monthlyTraffic',
  backlinks: 'backlinks',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompetitorContentScalarFieldEnum = {
  id: 'id',
  competitorId: 'competitorId',
  title: 'title',
  url: 'url',
  publishDate: 'publishDate',
  wordCount: 'wordCount',
  readabilityScore: 'readabilityScore',
  seoScore: 'seoScore',
  socialShares: 'socialShares',
  backlinks: 'backlinks',
  primaryKeywords: 'primaryKeywords',
  rankings: 'rankings',
  gapOpportunity: 'gapOpportunity',
  canImprove: 'canImprove',
  improvementNotes: 'improvementNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompetitorTopicScalarFieldEnum = {
  id: 'id',
  competitorId: 'competitorId',
  topicId: 'topicId',
  clusterId: 'clusterId',
  title: 'title',
  coverage: 'coverage',
  ranking: 'ranking',
  contentCount: 'contentCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompetitorKeywordScalarFieldEnum = {
  id: 'id',
  competitorId: 'competitorId',
  keyword: 'keyword',
  position: 'position',
  searchVolume: 'searchVolume',
  difficulty: 'difficulty',
  traffic: 'traffic',
  url: 'url',
  ourPosition: 'ourPosition',
  gapSize: 'gapSize',
  opportunity: 'opportunity',
  trackedAt: 'trackedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompetitorAnalysisScalarFieldEnum = {
  id: 'id',
  competitorId: 'competitorId',
  overallScore: 'overallScore',
  contentQuality: 'contentQuality',
  seoStrength: 'seoStrength',
  socialPresence: 'socialPresence',
  contentGaps: 'contentGaps',
  keywordGaps: 'keywordGaps',
  topicGaps: 'topicGaps',
  recommendations: 'recommendations',
  opportunities: 'opportunities',
  analyzedAt: 'analyzedAt'
};

exports.Prisma.ContentBriefScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  targetWordCount: 'targetWordCount',
  targetContentType: 'targetContentType',
  targetAudience: 'targetAudience',
  primaryKeyword: 'primaryKeyword',
  secondaryKeywords: 'secondaryKeywords',
  searchIntent: 'searchIntent',
  targetKeywords: 'targetKeywords',
  outline: 'outline',
  requiredSections: 'requiredSections',
  suggestedSections: 'suggestedSections',
  researchSources: 'researchSources',
  statisticsToInclude: 'statisticsToInclude',
  examplesNeeded: 'examplesNeeded',
  competitorAnalysis: 'competitorAnalysis',
  contentGaps: 'contentGaps',
  differentiators: 'differentiators',
  callsToAction: 'callsToAction',
  internalLinks: 'internalLinks',
  externalLinks: 'externalLinks',
  imagesNeeded: 'imagesNeeded',
  primaryPersona: 'primaryPersona',
  secondaryPersonas: 'secondaryPersonas',
  userQuestions: 'userQuestions',
  painPoints: 'painPoints',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  focusKeywordDensity: 'focusKeywordDensity',
  readingLevel: 'readingLevel',
  tone: 'tone',
  topicId: 'topicId',
  clusterId: 'clusterId',
  status: 'status',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.ContentSectionScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  title: 'title',
  content: 'content',
  sectionType: 'sectionType',
  order: 'order',
  level: 'level',
  parentId: 'parentId',
  wordCount: 'wordCount',
  keyPoints: 'keyPoints',
  contextTags: 'contextTags',
  promptUsed: 'promptUsed',
  modelUsed: 'modelUsed',
  generationContext: 'generationContext',
  generatedAt: 'generatedAt',
  readabilityScore: 'readabilityScore',
  coherenceScore: 'coherenceScore',
  relevanceScore: 'relevanceScore',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ToneAnalysisScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  sectionId: 'sectionId',
  primaryTone: 'primaryTone',
  secondaryTones: 'secondaryTones',
  confidence: 'confidence',
  formalityScore: 'formalityScore',
  emotionalTone: 'emotionalTone',
  emotionIntensity: 'emotionIntensity',
  authorityLevel: 'authorityLevel',
  personalityTraits: 'personalityTraits',
  brandVoiceScore: 'brandVoiceScore',
  consistencyScore: 'consistencyScore',
  deviations: 'deviations',
  analyzedAt: 'analyzedAt',
  modelUsed: 'modelUsed'
};

exports.Prisma.StyleCheckScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  toneAnalysisId: 'toneAnalysisId',
  styleGuideId: 'styleGuideId',
  complianceScore: 'complianceScore',
  violations: 'violations',
  sentenceLength: 'sentenceLength',
  paragraphLength: 'paragraphLength',
  readingLevel: 'readingLevel',
  passiveVoiceScore: 'passiveVoiceScore',
  vocabularyLevel: 'vocabularyLevel',
  jargonUsage: 'jargonUsage',
  repetitiveness: 'repetitiveness',
  brandVoiceMatch: 'brandVoiceMatch',
  voicePersonality: 'voicePersonality',
  suggestions: 'suggestions',
  criticalIssues: 'criticalIssues',
  checkedAt: 'checkedAt'
};

exports.Prisma.FactCheckScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  claim: 'claim',
  sectionId: 'sectionId',
  startPosition: 'startPosition',
  endPosition: 'endPosition',
  verificationStatus: 'verificationStatus',
  confidenceScore: 'confidenceScore',
  evidenceQuality: 'evidenceQuality',
  sourceUrls: 'sourceUrls',
  sourcesVerified: 'sourcesVerified',
  sourcesReliable: 'sourcesReliable',
  sourceCredibility: 'sourceCredibility',
  verificationMethod: 'verificationMethod',
  verificationNotes: 'verificationNotes',
  verifiedAt: 'verifiedAt',
  verifiedBy: 'verifiedBy',
  requiresAttention: 'requiresAttention',
  flagReason: 'flagReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SourceCitationScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  factCheckId: 'factCheckId',
  title: 'title',
  url: 'url',
  author: 'author',
  publishedDate: 'publishedDate',
  accessedDate: 'accessedDate',
  sourceType: 'sourceType',
  domain: 'domain',
  language: 'language',
  credibilityScore: 'credibilityScore',
  authorityScore: 'authorityScore',
  biasRating: 'biasRating',
  expertiseLevel: 'expertiseLevel',
  citationContext: 'citationContext',
  quote: 'quote',
  pageNumber: 'pageNumber',
  isPeerReviewed: 'isPeerReviewed',
  isGovernment: 'isGovernment',
  isAcademic: 'isAcademic',
  isRecent: 'isRecent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OptimizationSuggestionScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  category: 'category',
  title: 'title',
  description: 'description',
  impact: 'impact',
  effort: 'effort',
  priority: 'priority',
  currentValue: 'currentValue',
  suggestedValue: 'suggestedValue',
  beforeText: 'beforeText',
  afterText: 'afterText',
  position: 'position',
  seoImpact: 'seoImpact',
  keywordTarget: 'keywordTarget',
  readabilityImpact: 'readabilityImpact',
  engagementMetric: 'engagementMetric',
  expectedLift: 'expectedLift',
  isImplemented: 'isImplemented',
  implementedAt: 'implementedAt',
  implementedBy: 'implementedBy',
  isValidated: 'isValidated',
  validationScore: 'validationScore',
  actualImpact: 'actualImpact',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContentMetricsScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  sectionsGenerated: 'sectionsGenerated',
  totalGenerationTime: 'totalGenerationTime',
  averageSectionTime: 'averageSectionTime',
  overallQualityScore: 'overallQualityScore',
  coherenceScore: 'coherenceScore',
  consistencyScore: 'consistencyScore',
  originalityScore: 'originalityScore',
  toneConsistencyScore: 'toneConsistencyScore',
  brandAlignmentScore: 'brandAlignmentScore',
  totalClaims: 'totalClaims',
  verifiedClaims: 'verifiedClaims',
  disputedClaims: 'disputedClaims',
  sourcesUsed: 'sourcesUsed',
  reliableSources: 'reliableSources',
  averageSourceCredibility: 'averageSourceCredibility',
  seoScore: 'seoScore',
  readabilityScore: 'readabilityScore',
  engagementScore: 'engagementScore',
  totalSuggestions: 'totalSuggestions',
  implementedSuggestions: 'implementedSuggestions',
  measuredAt: 'measuredAt'
};

exports.Prisma.DataForSEOConnectionScalarFieldEnum = {
  id: 'id',
  username: 'username',
  apiKey: 'apiKey',
  baseUrl: 'baseUrl',
  connected: 'connected',
  lastChecked: 'lastChecked',
  connectionError: 'connectionError',
  apiQuotaLimit: 'apiQuotaLimit',
  apiQuotaRemaining: 'apiQuotaRemaining',
  apiQuotaResetAt: 'apiQuotaResetAt',
  rateLimit: 'rateLimit',
  timeout: 'timeout',
  retryAttempts: 'retryAttempts',
  cacheTTL: 'cacheTTL',
  fallbackMode: 'fallbackMode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KeywordAnalysisScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  keyword: 'keyword',
  searchVolume: 'searchVolume',
  cpc: 'cpc',
  competition: 'competition',
  competitionIndex: 'competitionIndex',
  seasonality: 'seasonality',
  difficulty: 'difficulty',
  difficultyLevel: 'difficultyLevel',
  searchIntent: 'searchIntent',
  intentConfidence: 'intentConfidence',
  intentModifiers: 'intentModifiers',
  relatedKeywords: 'relatedKeywords',
  longTailVariations: 'longTailVariations',
  topCompetitors: 'topCompetitors',
  yearOverYear: 'yearOverYear',
  trending: 'trending',
  seasonalPattern: 'seasonalPattern',
  monthlyTrends: 'monthlyTrends',
  dataSource: 'dataSource',
  analyzedAt: 'analyzedAt'
};

exports.Prisma.KeywordClusterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  theme: 'theme',
  primaryKeyword: 'primaryKeyword',
  totalSearchVolume: 'totalSearchVolume',
  averageDifficulty: 'averageDifficulty',
  searchIntent: 'searchIntent',
  priority: 'priority',
  keywordCount: 'keywordCount',
  commercialPotential: 'commercialPotential',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KeywordClusterMembershipScalarFieldEnum = {
  id: 'id',
  clusterId: 'clusterId',
  keywordAnalysisId: 'keywordAnalysisId'
};

exports.Prisma.OnPageSEOAnalysisScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  url: 'url',
  overallScore: 'overallScore',
  titleScore: 'titleScore',
  metaScore: 'metaScore',
  headingScore: 'headingScore',
  contentScore: 'contentScore',
  imageScore: 'imageScore',
  linkScore: 'linkScore',
  technicalScore: 'technicalScore',
  titleLength: 'titleLength',
  titleKeywordPresence: 'titleKeywordPresence',
  titleKeywordPosition: 'titleKeywordPosition',
  titleReadability: 'titleReadability',
  titleClickworthiness: 'titleClickworthiness',
  metaLength: 'metaLength',
  metaKeywordPresence: 'metaKeywordPresence',
  metaCallToAction: 'metaCallToAction',
  metaUniqueness: 'metaUniqueness',
  wordCount: 'wordCount',
  keywordDensity: 'keywordDensity',
  readabilityGrade: 'readabilityGrade',
  contentUniqueness: 'contentUniqueness',
  topicCoverage: 'topicCoverage',
  h1Count: 'h1Count',
  h1Text: 'h1Text',
  headingKeywordOptimization: 'headingKeywordOptimization',
  headingHierarchy: 'headingHierarchy',
  paragraphCount: 'paragraphCount',
  averageParagraphLength: 'averageParagraphLength',
  listCount: 'listCount',
  totalImages: 'totalImages',
  optimizedImages: 'optimizedImages',
  missingAltText: 'missingAltText',
  internalLinks: 'internalLinks',
  externalLinks: 'externalLinks',
  uniqueInternalLinks: 'uniqueInternalLinks',
  uniqueExternalLinks: 'uniqueExternalLinks',
  brokenLinks: 'brokenLinks',
  mobileOptimized: 'mobileOptimized',
  pageSpeedScore: 'pageSpeedScore',
  hasCanonical: 'hasCanonical',
  isIndexable: 'isIndexable',
  hasSchema: 'hasSchema',
  analyzedAt: 'analyzedAt'
};

exports.Prisma.MetaTagConfigurationScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  title: 'title',
  description: 'description',
  keywords: 'keywords',
  robots: 'robots',
  canonical: 'canonical',
  ogTitle: 'ogTitle',
  ogDescription: 'ogDescription',
  ogImage: 'ogImage',
  ogUrl: 'ogUrl',
  ogType: 'ogType',
  ogSiteName: 'ogSiteName',
  ogLocale: 'ogLocale',
  twitterCard: 'twitterCard',
  twitterTitle: 'twitterTitle',
  twitterDescription: 'twitterDescription',
  twitterImage: 'twitterImage',
  twitterSite: 'twitterSite',
  twitterCreator: 'twitterCreator',
  additionalTags: 'additionalTags',
  articleSchema: 'articleSchema',
  breadcrumbSchema: 'breadcrumbSchema',
  faqSchema: 'faqSchema',
  howToSchema: 'howToSchema',
  organizationSchema: 'organizationSchema',
  websiteSchema: 'websiteSchema',
  customSchema: 'customSchema',
  seoScore: 'seoScore',
  schemaValidation: 'schemaValidation',
  validationErrors: 'validationErrors',
  generatedAt: 'generatedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReadabilityAnalysisScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  fleschKincaidGrade: 'fleschKincaidGrade',
  fleschReadingEase: 'fleschReadingEase',
  gunningFog: 'gunningFog',
  colemanLiau: 'colemanLiau',
  automatedReadabilityIndex: 'automatedReadabilityIndex',
  averageScore: 'averageScore',
  targetGrade: 'targetGrade',
  readingLevelDescription: 'readingLevelDescription',
  targetAudience: 'targetAudience',
  sentences: 'sentences',
  averageSentenceLength: 'averageSentenceLength',
  complexWords: 'complexWords',
  passiveVoice: 'passiveVoice',
  questions: 'questions',
  exclamations: 'exclamations',
  personalPronouns: 'personalPronouns',
  transitionWords: 'transitionWords',
  overallQualityScore: 'overallQualityScore',
  expertiseScore: 'expertiseScore',
  authoritativenessScore: 'authoritativenessScore',
  trustworthinessScore: 'trustworthinessScore',
  originalityScore: 'originalityScore',
  depthScore: 'depthScore',
  usefulnessScore: 'usefulnessScore',
  readabilityScore: 'readabilityScore',
  structureScore: 'structureScore',
  engagementScore: 'engagementScore',
  seoComplianceScore: 'seoComplianceScore',
  analyzedAt: 'analyzedAt'
};

exports.Prisma.ReadabilitySuggestionScalarFieldEnum = {
  id: 'id',
  readabilityAnalysisId: 'readabilityAnalysisId',
  type: 'type',
  priority: 'priority',
  title: 'title',
  description: 'description',
  examples: 'examples',
  expectedImprovement: 'expectedImprovement',
  implemented: 'implemented',
  implementedAt: 'implementedAt'
};

exports.Prisma.SEOAnalysisResultScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  url: 'url',
  overallScore: 'overallScore',
  onPageScore: 'onPageScore',
  technicalScore: 'technicalScore',
  contentScore: 'contentScore',
  keywordScore: 'keywordScore',
  mobileScore: 'mobileScore',
  dataSource: 'dataSource',
  processingTime: 'processingTime',
  modelUsed: 'modelUsed',
  keywordAnalysisIncluded: 'keywordAnalysisIncluded',
  competitorAnalysisIncluded: 'competitorAnalysisIncluded',
  schemaAnalysisIncluded: 'schemaAnalysisIncluded',
  readabilityAnalysisIncluded: 'readabilityAnalysisIncluded',
  qualityGatesPassed: 'qualityGatesPassed',
  failedGates: 'failedGates',
  analyzedAt: 'analyzedAt'
};

exports.Prisma.SEORecommendationScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  seoAnalysisId: 'seoAnalysisId',
  onPageAnalysisId: 'onPageAnalysisId',
  type: 'type',
  priority: 'priority',
  category: 'category',
  title: 'title',
  description: 'description',
  currentValue: 'currentValue',
  suggestedValue: 'suggestedValue',
  impact: 'impact',
  effort: 'effort',
  timeframe: 'timeframe',
  implementation: 'implementation',
  resources: 'resources',
  status: 'status',
  implementedAt: 'implementedAt',
  implementedBy: 'implementedBy',
  notes: 'notes',
  isQuickWin: 'isQuickWin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SEOCompetitorAnalysisScalarFieldEnum = {
  id: 'id',
  blogPostId: 'blogPostId',
  seoAnalysisId: 'seoAnalysisId',
  keyword: 'keyword',
  competitors: 'competitors',
  averageMetrics: 'averageMetrics',
  contentGaps: 'contentGaps',
  keywordGaps: 'keywordGaps',
  opportunities: 'opportunities',
  analyzedAt: 'analyzedAt'
};

exports.Prisma.SEOAnalysisCacheScalarFieldEnum = {
  id: 'id',
  cacheKey: 'cacheKey',
  operation: 'operation',
  requestHash: 'requestHash',
  responseData: 'responseData',
  hitCount: 'hitCount',
  lastHit: 'lastHit',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.BlogPostStatus = exports.$Enums.BlogPostStatus = {
  DRAFT: 'DRAFT',
  PENDING_REVIEW: 'PENDING_REVIEW',
  IN_REVIEW: 'IN_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED',
  SCHEDULED: 'SCHEDULED',
  UNPUBLISHED: 'UNPUBLISHED'
};

exports.ContentType = exports.$Enums.ContentType = {
  BLOG: 'BLOG',
  ARTICLE: 'ARTICLE',
  TUTORIAL: 'TUTORIAL',
  HOWTO: 'HOWTO',
  LISTICLE: 'LISTICLE',
  COMPARISON: 'COMPARISON',
  NEWS: 'NEWS',
  REVIEW: 'REVIEW',
  GUIDE: 'GUIDE',
  CASE_STUDY: 'CASE_STUDY',
  OPINION: 'OPINION',
  INTERVIEW: 'INTERVIEW'
};

exports.ToneType = exports.$Enums.ToneType = {
  PROFESSIONAL: 'PROFESSIONAL',
  CASUAL: 'CASUAL',
  AUTHORITATIVE: 'AUTHORITATIVE',
  FRIENDLY: 'FRIENDLY',
  TECHNICAL: 'TECHNICAL',
  CONVERSATIONAL: 'CONVERSATIONAL'
};

exports.ResearchDepth = exports.$Enums.ResearchDepth = {
  BASIC: 'BASIC',
  DETAILED: 'DETAILED',
  COMPREHENSIVE: 'COMPREHENSIVE'
};

exports.WorkflowAction = exports.$Enums.WorkflowAction = {
  CREATED: 'CREATED',
  SUBMITTED_FOR_REVIEW: 'SUBMITTED_FOR_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  PUBLISHED: 'PUBLISHED',
  UNPUBLISHED: 'UNPUBLISHED',
  ARCHIVED: 'ARCHIVED',
  SCHEDULED: 'SCHEDULED',
  UPDATED: 'UPDATED'
};

exports.MetadataFieldType = exports.$Enums.MetadataFieldType = {
  STRING: 'STRING',
  TEXT: 'TEXT',
  NUMBER: 'NUMBER',
  BOOLEAN: 'BOOLEAN',
  DATE: 'DATE',
  JSON: 'JSON',
  URL: 'URL',
  EMAIL: 'EMAIL'
};

exports.SectionType = exports.$Enums.SectionType = {
  HEADING: 'HEADING',
  SUBHEADING: 'SUBHEADING',
  PARAGRAPH: 'PARAGRAPH',
  INTRODUCTION: 'INTRODUCTION',
  CONCLUSION: 'CONCLUSION',
  LIST: 'LIST',
  QUOTE: 'QUOTE',
  CODE_BLOCK: 'CODE_BLOCK',
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  CTA: 'CTA',
  SIDEBAR: 'SIDEBAR',
  CALLOUT: 'CALLOUT',
  STEPS: 'STEPS',
  FAQ: 'FAQ',
  TABLE: 'TABLE'
};

exports.ToneCategory = exports.$Enums.ToneCategory = {
  PROFESSIONAL: 'PROFESSIONAL',
  CASUAL: 'CASUAL',
  AUTHORITATIVE: 'AUTHORITATIVE',
  FRIENDLY: 'FRIENDLY',
  TECHNICAL: 'TECHNICAL',
  CONVERSATIONAL: 'CONVERSATIONAL',
  ACADEMIC: 'ACADEMIC',
  PERSUASIVE: 'PERSUASIVE',
  INFORMATIVE: 'INFORMATIVE',
  ENTERTAINING: 'ENTERTAINING',
  EMPATHETIC: 'EMPATHETIC',
  URGENT: 'URGENT',
  CONFIDENT: 'CONFIDENT',
  HUMBLE: 'HUMBLE'
};

exports.EmotionalTone = exports.$Enums.EmotionalTone = {
  NEUTRAL: 'NEUTRAL',
  POSITIVE: 'POSITIVE',
  NEGATIVE: 'NEGATIVE',
  EXCITED: 'EXCITED',
  CONCERNED: 'CONCERNED',
  OPTIMISTIC: 'OPTIMISTIC',
  CAUTIOUS: 'CAUTIOUS',
  PASSIONATE: 'PASSIONATE',
  ANALYTICAL: 'ANALYTICAL',
  INSPIRING: 'INSPIRING'
};

exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  PENDING: 'PENDING',
  VERIFIED: 'VERIFIED',
  DISPUTED: 'DISPUTED',
  FALSE: 'FALSE',
  PARTIALLY_TRUE: 'PARTIALLY_TRUE',
  UNVERIFIABLE: 'UNVERIFIABLE',
  REQUIRES_UPDATE: 'REQUIRES_UPDATE'
};

exports.SourceType = exports.$Enums.SourceType = {
  ACADEMIC_PAPER: 'ACADEMIC_PAPER',
  NEWS_ARTICLE: 'NEWS_ARTICLE',
  GOVERNMENT_DOCUMENT: 'GOVERNMENT_DOCUMENT',
  OFFICIAL_WEBSITE: 'OFFICIAL_WEBSITE',
  BLOG_POST: 'BLOG_POST',
  BOOK: 'BOOK',
  REPORT: 'REPORT',
  STUDY: 'STUDY',
  PRESS_RELEASE: 'PRESS_RELEASE',
  SOCIAL_MEDIA: 'SOCIAL_MEDIA',
  VIDEO: 'VIDEO',
  PODCAST: 'PODCAST',
  INTERVIEW: 'INTERVIEW',
  OTHER: 'OTHER'
};

exports.BiasRating = exports.$Enums.BiasRating = {
  LEFT: 'LEFT',
  LEAN_LEFT: 'LEAN_LEFT',
  CENTER: 'CENTER',
  LEAN_RIGHT: 'LEAN_RIGHT',
  RIGHT: 'RIGHT',
  MIXED: 'MIXED',
  UNKNOWN: 'UNKNOWN'
};

exports.ExpertiseLevel = exports.$Enums.ExpertiseLevel = {
  EXPERT: 'EXPERT',
  PRACTITIONER: 'PRACTITIONER',
  ACADEMIC: 'ACADEMIC',
  JOURNALIST: 'JOURNALIST',
  GENERAL_PUBLIC: 'GENERAL_PUBLIC',
  UNKNOWN: 'UNKNOWN'
};

exports.OptimizationCategory = exports.$Enums.OptimizationCategory = {
  SEO: 'SEO',
  READABILITY: 'READABILITY',
  ENGAGEMENT: 'ENGAGEMENT',
  STRUCTURE: 'STRUCTURE',
  TONE_STYLE: 'TONE_STYLE',
  FACT_ACCURACY: 'FACT_ACCURACY',
  SOURCE_QUALITY: 'SOURCE_QUALITY',
  CTA_OPTIMIZATION: 'CTA_OPTIMIZATION',
  HEADLINE: 'HEADLINE',
  META_DESCRIPTION: 'META_DESCRIPTION',
  KEYWORDS: 'KEYWORDS',
  INTERNAL_LINKING: 'INTERNAL_LINKING',
  CONTENT_LENGTH: 'CONTENT_LENGTH',
  FORMATTING: 'FORMATTING'
};

exports.ImpactLevel = exports.$Enums.ImpactLevel = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.EffortLevel = exports.$Enums.EffortLevel = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

exports.Prisma.ModelName = {
  BlogPost: 'BlogPost',
  BlogPostVersion: 'BlogPostVersion',
  BlogPostMedia: 'BlogPostMedia',
  BlogPostCTA: 'BlogPostCTA',
  TableOfContentsEntry: 'TableOfContentsEntry',
  SearchRanking: 'SearchRanking',
  BlogPostSuggestion: 'BlogPostSuggestion',
  ContentTypePattern: 'ContentTypePattern',
  BlogAIConfiguration: 'BlogAIConfiguration',
  BlogTemplate: 'BlogTemplate',
  ContentResearch: 'ContentResearch',
  SEOAnalysis: 'SEOAnalysis',
  Category: 'Category',
  BlogPostCategory: 'BlogPostCategory',
  Tag: 'Tag',
  BlogPostTag: 'BlogPostTag',
  TagSuggestion: 'TagSuggestion',
  ContentRelationship: 'ContentRelationship',
  VersionBranch: 'VersionBranch',
  VersionComparison: 'VersionComparison',
  WorkflowHistory: 'WorkflowHistory',
  ApprovalWorkflow: 'ApprovalWorkflow',
  ApprovalStep: 'ApprovalStep',
  MetadataField: 'MetadataField',
  CustomMetadata: 'CustomMetadata',
  SeoMetadata: 'SeoMetadata',
  PublishingSchedule: 'PublishingSchedule',
  Notification: 'Notification',
  ContentSeries: 'ContentSeries',
  BlogPostSeries: 'BlogPostSeries',
  TopicCluster: 'TopicCluster',
  TopicResearch: 'TopicResearch',
  TopicRelationship: 'TopicRelationship',
  EditorialCalendar: 'EditorialCalendar',
  EditorialCalendarEntry: 'EditorialCalendarEntry',
  CalendarMilestone: 'CalendarMilestone',
  TimeTrackingEntry: 'TimeTrackingEntry',
  Competitor: 'Competitor',
  CompetitorContent: 'CompetitorContent',
  CompetitorTopic: 'CompetitorTopic',
  CompetitorKeyword: 'CompetitorKeyword',
  CompetitorAnalysis: 'CompetitorAnalysis',
  ContentBrief: 'ContentBrief',
  ContentSection: 'ContentSection',
  ToneAnalysis: 'ToneAnalysis',
  StyleCheck: 'StyleCheck',
  FactCheck: 'FactCheck',
  SourceCitation: 'SourceCitation',
  OptimizationSuggestion: 'OptimizationSuggestion',
  ContentMetrics: 'ContentMetrics',
  DataForSEOConnection: 'DataForSEOConnection',
  KeywordAnalysis: 'KeywordAnalysis',
  KeywordCluster: 'KeywordCluster',
  KeywordClusterMembership: 'KeywordClusterMembership',
  OnPageSEOAnalysis: 'OnPageSEOAnalysis',
  MetaTagConfiguration: 'MetaTagConfiguration',
  ReadabilityAnalysis: 'ReadabilityAnalysis',
  ReadabilitySuggestion: 'ReadabilitySuggestion',
  SEOAnalysisResult: 'SEOAnalysisResult',
  SEORecommendation: 'SEORecommendation',
  SEOCompetitorAnalysis: 'SEOCompetitorAnalysis',
  SEOAnalysisCache: 'SEOAnalysisCache'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
